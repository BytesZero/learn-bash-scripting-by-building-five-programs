builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
builtin printf "\e]633;P;ContinuationPrompt=$(echo "$PS2" | sed 's/\x1b/\\\\x1b/g')\a"
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello bash
touch questionnaire.sh
sh questionnaire.sh
bash questionnaire.sh
which bash
./questionnaire.sh
ls --color=auto -l
chmod +x questionnaire.sh
ls --color=auto -l
./questionnaire.sh
ls --color=auto -l
./questionnaire.sh
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
[[ "$(uname -s)" =~ ^CYGWIN*|MINGW*|MSYS* ]]
__vsc_is_windows=0
[[ "$HISTCONTROL" =~ .. ]]
__vsc_history_verify=1
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
builtin printf "\e]633;P;ContinuationPrompt=$(echo "$PS2" | sed 's/\x1b/\\\\x1b/g')\a"
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
./questionnaire.sh
./questionnaire.sh
read NAME
echo Hello $NAME.
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
echo --help
man echo
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
touch countdown.sh
chmod a+x countdown.sh
./countdown.sh
./countdown.sh arg1 arg2 arg3
./countdown.sh arg1 arg2 arg3
man if
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
help
man
man echo
man if
help if
./countdown.sh
./countdown.sh arg1 arg2 arg3
./countdown.sh arg2 arg3
./countdown.sh arg2 arg3
__vsc_prompt_cmd_original
./countdown.sh 4
./countdown.sh 5
help if
help
help [[ expression ]]
help test
./countdown.sh 5
[[ 4 -le 5 ]]
echo $?
[[ 4 -ge 5 ]]
echo $?
[[ 4 -ge 5 ]]
[[ 10 -ne 5 ]]
bad_command
bad_command
ls --color=auto
ls --color=auto -y
ls --color=auto -y
test help
help test
[[ -a countdown.sh ]]
[[ -a bad_file.txt ]]
help test
[[ -a countdown.sh ]]
[[ -x countdown.sh ]]
help [[
[[ -x countdown.sh && 5 -le 4 ]]
[[ -x countdown.sh || 5 -le 4 ]]
help test
./countdown.sh -1
./countdown.sh 1
./countdown.sh 1
./countdown.sh -1
help
help for
./countdown.sh 10
help sleep
help
ls --color=auto /
ls --color=auto /bin
sleep help
sleep --help
man sleep
sleep 3
./countdown.sh 3
./countdown.sh 3
./countdown.sh 1
help while
man while
./countdown.sh 5
touch bingo.sh
chmod +x bingo.sh
./bingo.sh
printenv
echo $LANG
declare -p
echo $RANDOM
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
I=0
__vsc_prompt_cmd_original
echo I
echo $I
__vsc_prompt_cmd_original
((I++))
echo $I
help let
(( I += 10 ))
echo $I
$(( I + 4 ))
echo $(( I + 4 ))
echo $I
J=$(($I-6))
echo $J
echo $((J*5+25))
echo $J
declare -p
declare -p J
declare -p J
declare -p RANDOM
echo $(($RANDOM % 75))
echo $(($RANDOM % 75 + 1))
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
touch randomcount.sh
chmod +x randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
./randomcount.sh
help let
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
touch fortune.sh
chmod +x fortune.sh
./fortune.sh
ARR=("a" "b" "c")
echo ${ARR[1]}
echo $*
echo $@
echo ${ARR[0]}
echo ${ARR[@]}
declare -p ARR
RESPONSES=("Yes","No","Maybe","Outlook good","Don't count on it","Ask again later")
echo ${RESPONSES[@]}
RESPONSES=("Yes" "No" "Maybe" "Outlook good" "Don't count on it" "Ask again later")
echo ${RESPONSES[@]}
RESPONSES=("Yes" "No" "Maybe" "Outlook good" "Don't count on it" "Ask again later")
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
help
help function
